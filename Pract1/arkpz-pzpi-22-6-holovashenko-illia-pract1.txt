Міністерство освіти і науки України
Харківський національний університет радіоелектроніки

Кафедра програмної інженерії





ЗВІТ

до практичного заняття №1 з дисципліни
"Аналіз та рефакторинг коду"





Виконав:
ст. гр. ПЗПІ-22-6
Головашенко І. В.

Перевірив:
ст. викл. катедри ПІ
Сокорчук І. П.





Харків 2024
1. Правила оформлення програмного коду на мові Dart

1.1  Мета роботи: Метою даної роботи є вивчення основних принципів та правил оформлення програмного коду на мові Dart для підвищення його читабельності, підтримуваності та зручності використання іншими розробниками.

1.2  Хід роботи:
1. Обрав мову програмування Dart для аналізу правил стильових рекомендацій, правил найменування змінних, функцій та класів, структури коду, принципів рефакторингу.
2. Після вибору мови програмування ознайомився з основними рекомендаціями для написання якісного та чистого коду на мові  Dart. Підготував приклади коду, які демонструють, як потрібно застосовувати наведені рекомендації.
3. Підготував слайди для презентації аналізу основних рекомендацій для написання якісного та чистого коду на мові  Dart.
Рекомендації написання коду на мові програмування Dart:
1) Рекомендація: Вибирайте зрозумілі імена для змінних, функцій, класів.
Опис: Описові імена значно полегшують роботу над проєктами, особливо коли код переглядається іншими розробниками або коли до нього повертаються через тривалий час.
Приклад:

1. // Поганий приклад
2. class car {
3.   String br;
4.   int sp;
5.
6.   car(this.br, this.sp);
7.
8.   void info() {
9.     print('Brand: $br, Speed: $sp km/h');
10.  }
11. }
12.
13. // Гарний приклад
14. class Car {
15.   String brand;
16.   int speed;
17.
18.   Car(this.brand, this.speed);
19.
20.   void displayInfo() {
21.     print('Brand: $brand, Speed: $speed km/h');
22.   }
23. }

2) Рекомендація: Пишіть коментарі тільки там, де код складний та неочевидний. Уникайте коментарів які лише повторюють код.
Опис: Добре написані коментарі допомагають новим членам команди швидше зрозуміти логіку програми і уникнути помилок під час внесення змін.
Приклад:

1. // Поганий приклад
2. // Обчислюємо факторіал числа.
3. int factorial(int n) {
4.   if (n == 0) {
5.     return 1; // Повертаємо 1.
6.   }
7.   return n * factorial(n - 1); // Повертаємо n * factorial(n - 1).
8. }
9.
10. // Гарний приклад
11. int factorial(int n) {
12.   if (n == 0) {
13.     // Базовий випадок: факторіал 0 дорівнює 1.
14.     return 1;
15.   }
16.   // Рекурсивний виклик функції.
17.   return n * factorial(n - 1);
18. }

3) Рекомендація: Використовуйте відступи для покращення читабельності. Розділяйте логічні блоки порожніми рядками.
Опис: Це дозволяє розробникам легко ідентифікувати окремі частини програми, що виконують різні функції або логічні операції. Такий підхід допомагає швидше зрозуміти структуру коду і зосередитись на ключових його частинах.
Приклад:

1. // Поганий приклад
2. void main() {
3.   Car myCar = Car('Toyota', 120);
4.   if (myCar.speed > 100) {myCar.displayInfo();}
5. }
6.
7. // Гарний приклад
8. void main() {
9.   Car myCar = Car('Toyota', 120);
10.
11.   if (myCar.speed > 100) {
12.     myCar.displayInfo();
13.   }
14. }

4) Рекомендація: Принцип єдиної відповідальності (Single Responsibility Principle). Функція або клас повинні мати лише одну причину для зміни, тобто вони повинні виконувати тільки одну конкретну задачу.
Опис: Дотримання цього принципу сприяє створенню модульного, чистого та більш зрозумілого коду, який легше тестувати та підтримувати.
Приклад:

1. // Поганий приклад
2. void saveUser(String username, String email) {
3.   // Перевірка валідності даних
4.   if (username.isEmpty || email.isEmpty) {
5.     throw Exception('Invalid data');
6.   }
7.
8.   // Уявне збереження користувача
9.   print('Saving user to database...');
10.   print('User saved: $username, $email');
11. }
12.
13. // Гарний приклад
14. void validateUser(String username, String email) {
15.   if (username.isEmpty || email.isEmpty) {
16.     throw Exception('Invalid data');
17.   }
18. }
19.
20. void saveUserToDatabase(String username, String email) {
21.   print('Saving user to database...');
22.   print('User saved: $username, $email');
23. }
24.
25. // Основна функція, що викликає інші
26. void processUser(String username, String email) {
27.   validateUser(username, email);
28.   saveUserToDatabase(username, email);
29. }

5) Рекомендація: Не допускайте дублювання коду. Уникайте дублювання коду наскільки це можливо.
Опис: Дублювання ускладнює підтримку та оновлення коду, призводячи до помилок. Замість цього створюйте надійну абстракцію, яка може обробляти кілька сценаріїв за допомогою однієї функції або модуля.
Приклад:

1. // Поганий приклад
2. double squareArea(double side) {
3.   return side * side;
4. }
5.
6. double rectangleArea(double width, double height) {
7.   return width * height;
8. }
9.
10. // Гарний приклад
11. double calculateArea(double width, double? height) {
12.   height ??= width;
13.   return width * height;
14. }

6) Рекомендація: Використовуйте коментарі документації /// для опису членів класів і типів. Починайте коментарі до документації з короткого опису (одне речення). Відокремлюйте перше речення коментаря документації в окремий абзац.
Опис: Чітка документація допомагає визначити очікувану поведінку функцій, описати вхідні параметри, повернуті значення та можливі винятки.
Приклад:

1. // Поганий приклад
2. /// Deletes the file at [path]. Throws an [IOError] if the file could not
3. /// be found. Throws a [PermissionError] if the file is present but could
4. /// not be deleted.
5. void delete(String path) {
6.
7. }
8.
9. // Гарний приклад
10. /// Deletes the file at [path].
11. ///
12. /// Throws an [IOError] if the file could not be found. Throws a
13. /// [PermissionError] if the file is present but could not be deleted.
14. void delete(String path) {
15.
16. }



7) Рекомендація: Пишіть тести для функціоналу, а вже потім сам код.
Опис: Це допомагає гарантувати, що код працює належним чином і дозволяє виявляти потенційні помилки на ранніх етапах розробки.
Приклад:

1. import 'package:test/test.dart';
2.
3. void main() {
4.   test('add() returns the sum of two positive numbers', () {
5.     expect(add(2, 3), equals(5));
6.   });
7.
8.   test('add() returns the sum with negative numbers', () {
9.     expect(add(-2, 3), equals(1));
10.   });
11.
12.   test('add() returns the sum with zero', () {
13.     expect(add(0, 0), equals(0));
14.   });
15. }
16.
17. int add(int a, int b) {
18.   return a + b;
19. }

1.3  Висновки: Під час виконання практичної роботи вивчив основні принципи та правила оформлення програмного коду на мові Dart для підвищення його читабельності, підтримуваності та зручності використання іншими розробниками. В результаті було створено презентацію “Правила оформлення програмного коду на Dart”. Слайди презентації наведено у додатку А.
Посилання на GitHub репозиторій: https://github.com/NureHolovashenkoIllia/arkpz-pzpi-22-6-holovashenko-illia/tree/main/Pract1
Посилання на YouTube відео: https://www.youtube.com/watch?v=rDCSPkwvA6M

1.4  Список використаних джерел
1. Dart documentation. Dart programming language | Dart. URL: https://dart.dev/guides (дата звернення: 02.12.2024).
2. Flutter – clean code. Medium. URL: https://santhosh-adiga-u.medium.com/flutter-clean-code-ba4df36cb40c (дата звернення: 04.12.2024).
3. Holmes. Best practices writing Clean Code with Flutter. DEV Community. URL: https://dev.to/glopgeek/best-practices-writing-clean-code-with-flutter-501m (дата звернення: 02.12.2024).
4. Writing Clean Code in Dart. CloudDevs. URL: https://clouddevs.com/dart/clean-code/ (дата звернення: 03.12.2024).















Додаток А
Слайди презентації



























