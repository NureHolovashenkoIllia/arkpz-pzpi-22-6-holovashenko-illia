Міністерство освіти і науки України
Харківський національний університет радіоелектроніки

Кафедра програмної інженерії




ЗВІТ

до лабораторної роботи №4 з дисципліни
"Аналіз та рефакторинг коду"
на тему "Розробка IoT клієнта (бізнес-логіки та функцій налаштування)"





Виконав:
ст. гр. ПЗПІ-22-6
Головашенко І. В.

Перевірив:
ст. викл. катедри ПІ
Сокорчук І. П.




Харків 2024
4. Розробка IoT клієнта (бізнес-логіки та функцій налаштування)

4.1  Мета роботи: Метою даної роботи є розроблення програмного забезпечення для IoT або SmartDevice пристрою, створеного на базі будь-якої поширеної на сьогодні платформи, придатної для реалізації вбудованих систем (Embedded System).

4.2  Хід роботи:

4.2.1 Розробити будову програмного забезпечення ІоТ клієнта.
   IoT клієнт є ключовою складовою програмної системи попередження про пожежі (FlameGuard). Його побудова має такі основні аспекти:
   Архітектура IoT клієнта
1. Основні завдання:
- Симуляція роботи датчиків: розробка механізмів для генерації даних про температуру, дим, вологість і концентрацію газів. Значення генеруються в заданих межах з використанням алгоритмів нормалізації та округлення для підвищення точності.
- Регулярна передача даних: забезпечення постійного обміну інформацією між IoT клієнтом і MQTT-брокером. Реалізовано асинхронну передачу даних для зменшення затримок і підвищення надійності.
- Використання мови C++ для ефективного управління пам’яттю та інтеграції з апаратним забезпеченням через HTTP-запити та REST API.
2. Компоненти:
- Модуль генерації даних: створює значення для датчиків з урахуванням встановлених меж і частоти генерації. Враховуються специфічні параметри кожного типу сенсора (температура, вологість, гази, дим).
- Модуль передачі даних: публікує повідомлення у форматі JSON до MQTT-брокера через захищене з'єднання. Забезпечує конфіденційність і цілісність переданої інформації.
- Модуль моніторингу стану: аналізує працездатність сенсорів і виявляє можливі несправності, такі як відсутність передачі даних або порушення діапазонів значень.

   Основні функції
- Симуляція сенсорів: створення реалістичних значень для різних типів сенсорів. Моделюються особливості реальної поведінки сенсорів.
- Передача даних через MQTT: забезпечення швидкого і безпечного обміну структурованими даними, що включають тип сенсора, значення, одиниці виміру та часову мітку у стандарті ISO 8601.
- Діагностика несправностей: виявлення затримок або відсутності оновлень від сенсорів, а також створення логів помилок для оперативного реагування.

   Протоколи та безпека
- Використовується MQTT як протокол зв’язку, що дозволяє ефективно обробляти великі обсяги даних.
- Забезпечення конфіденційності через шифрування повідомлень та автентифікацію.
- Перевірка цілісності даних для запобігання помилок під час передачі.




4.2.2 Створити UML діаграму прецедентів для ІоТ клієнта.
Створив UML діаграму прецедентів для ІоТ клієнта див. рис. 4.1.
















4.2.3 Розробити бізнес логіку (математину обробку пов?язаних із предметною областю даних) та функції налаштування ІоТ клієнта.
   Бізнес-логіка
1. Обробка даних сенсорів:
- Випадково згенеровані дані передаються на сервер через MQTT.
- Сервер перевіряє дані на відповідність критичним параметрам, генерує тривоги та повідомляє користувачів у разі перевищення меж.
2. Аналіз стану будівлі
- Стан будівлі визначається на основі вагових коефіцієнтів для кожного типу сенсорів, що задаються залежно від типу будівлі (офіс, державна установа, приватне житло). Ваги зберігаються в конфігурації системи.
- Після отримання даних сенсорів IoT клієнт виконує нормалізацію значень, через експоненціальне зниження впливу великих значень. Підсумковий стан будівлі обчислюється як зважений середній показник усіх сенсорів.
- Результат обчислення порівнюється з пороговими значеннями, щоб визначити загальний стан будівлі ("Excellent", "Good", "Fair”). Результати надсилаються серверу через MQTT для подальшої обробки та демонстрації користувачам.
3. Обробка тривог:
- Надсилання сповіщень користувачам про небезпечні ситуації (наприклад, підвищення температури або виявлення диму).

   Функції налаштування
1. Системний адміністратор може:
- Задавати граничні значення для датчиків: Значення зберігаються в конфігураційному файлі.
- Налаштовувати частоту перевірки стану сенсорів: Частота встановлюється у вигляді інтервалу публікації даних (в секундах).
- Редагувати вагові коефіцієнти для кожного типу сенсорів, що задаються залежно від типу будівлі.

4.2.4 Створити діаграму діяльності для ІоТ клієнта.
Створив діаграму діяльності для ІоТ клієнта. Діаграма зображена на рисунку 4.2.


















4.2.5 Створити програмну реалізацію бізнес логіки та функцій налаштування ІоТ клієнта.
Приклад програмного коду реалізації бізнес логіки аналізу стану будівлі:
1.  std::string analyseBuildingCondition(const std::unordered_map<std::string, double>& sensorValues,
2.                                       const std::string& buildingType,
3.                                       const std::unordered_map<std::string, std::unordered_map<std::string, double>>& weights) {
4.
5.      if (weights.find(buildingType) == weights.end()) {
6.          throw std::invalid_argument("Unknown building type: " + buildingType);
7.      }
8.
9.      const auto& buildingWeights = weights.at(buildingType);
10.     double score = 0.0;
11.     double totalWeight = 0.0;
12.
13.     // Normalize sensor values and calculate weighted score
14.     for (const auto& [sensorType, value] : sensorValues) {
15.         if (buildingWeights.find(sensorType) != buildingWeights.end()) {
16.             double normalizedValue = 1.0 - std::exp(-value / 100.0);
17.             score += normalizedValue * buildingWeights.at(sensorType);
18.             totalWeight += buildingWeights.at(sensorType);
19.         }
20.     }
21.
22.     // Calculate final score as a percentage
23.     score = (totalWeight > 0) ? (score / totalWeight) * 100 : 0;
24.
25.     if (score >= 90) return "Excellent";
26.     if (score >= 80) return "Good";
27.     if (score >= 60) return "Fair";
28.     if (score >= 40) return "Poor";
29.     return "Dangerous";
30. }

Приклад програмного коду налаштування частоти надсилання датчиками вимірів:
1.  /**
2.   * REST controller for managing sensor settings.
3.   * Provides endpoints for editing sensor settings for administrators.
4.   */
5.  @RestController
6.  @RequestMapping("/api/admin/sensor-settings" )
7.  @Tag(name = "Sensor Settings", description = "Endpoints for editing sensor settings for administrators")
8.  public class SensorSettingsController {
9.
10.     @Autowired
11.     private SensorSettingsService sensorSettingsService;
12.
13.     /**
14.      * Updates the measurement frequency of a sensor setting.
15.      *
16.      * @param id                  the ID of the sensor setting to update.
17.      * @param measurementFrequency the new measurement frequency to set.
18.      * @return a response entity with the updated sensor settings or an error message if not found.
19.      */
20.     @Operation(summary = "Update measurement frequency", description = "Updates the measurement frequency of the specified sensor setting.")
21.     @ApiResponses({
22.             @ApiResponse(responseCode = "200", description = "Measurement frequency updated successfully.",
23.                     content = @Content(schema = @Schema(implementation = SensorSettings.class))),
24.             @ApiResponse(responseCode = "404", description = "Sensor settings not found.",
25.                     content = @Content(schema = @Schema(type = "string", example = "{\"error\":\"Not Found\"}")))
26.     })
27.     @PreAuthorize("hasAuthority('System_Administrator')")
28.     @PatchMapping("/{id}/measurement-frequency")
29.     public ResponseEntity<?> updateMeasurementFrequency(@PathVariable Integer id, @RequestParam Integer measurementFrequency) {
30.         try {
31.             Optional<SensorSettings> updatedSensorSettings = sensorSettingsService.updateMeasurementFrequency(id, measurementFrequency);
32.             return ResponseEntity.ok(updatedSensorSettings);
33.         } catch (Exception e) {
34.             return ResponseEntity.status(HttpStatus.NOT_FOUND)
35.                     .body("{\"error\":\"" + e.getMessage() + "\"}");
36.         }
37.     }
38. }

4.3 Висновок: В ході виконання лабораторної роботи я розробив програмне забезпечення для IoT пристрою.
Посилання на GitHub репозиторій: https://github.com/NureHolovashenkoIllia/arkpz-pzpi-22-6-holovashenko-illia/tree/main/Task4
Посилання на YouTube відео: https://youtu.be/N8dq6ATjY84